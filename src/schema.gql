# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Task {
  isDelete: Boolean!
  created_at: Timestamp!
  updated_at: Timestamp!
  id: Int!
  name: String!
  start_date: String!
  start_time: Timestamp!
  end_time: Timestamp!
  status: Float!
  desc: String
  created_by: Int!
  user: User
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  isDelete: Boolean!
  created_at: Timestamp!
  updated_at: Timestamp!
  id: Int!
  name: String!
  email: String!
  password: String
  avatar: String
  dob: String
  status: Float
  group: Group
  tasks: [Task!]
}

type Group {
  isDelete: Boolean!
  created_at: Timestamp!
  updated_at: Timestamp!
  id: Int!
  group_name: String!
  avatar: String
  members: [User!]!
}

type GraphQLError {
  field: String!
  message: String!
}

type UserResponse {
  id: Float!
  username: String!
  email: String!
}

type CreateUserResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  user: UserResponse
}

type LoginResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  accessToken: String
  refreshToken: String
}

type LogoutResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  id: Int!
}

type ChangePassResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  id: Int!
}

type UpdateProfileResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  id: Int!
}

type GroupResponse {
  id: Float!
  group_name: String!
}

type UpsertGroupResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  group: GroupResponse
}

type AddRemoveUser {
  id: Float!
  user_name: String!
}

type AddAndRemoveUserResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  groupId: Float
  user: AddRemoveUser
}

type GroupDelete {
  id: Int
  group_name: String
}

type DeleteGroupResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  group: GroupDelete
}

type TaskResponse {
  id: Int!
  name: String!
}

type ActionTaskResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  task: TaskResponse
}

type RefreshTokenResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  accessToken: String
  refreshToken: String
}

type GetTaskResponse {
  code: Float!
  success: Boolean!
  message: String!
  errors: [GraphQLError!]
  tasks: [Task!]
  completed: Int
  doing: Int
  todo: Int
  total: Int!
  currentPage: Int!
  nextPage: Int
  prevPage: Int
  lastPage: Int
}

type Query {
  getAllTasks(fillter: TaskFillterInput, userId: Int): GetTaskResponse
  getAllGroups: [Group!]
  getGroupByUser(userId: Int!): Group
  getAllUsers: [User!]
}

input TaskFillterInput {
  time: String
  createBy: Int
  date: String
  status: Int
  search: String
  pagination: PaginationInput!
  sort: SortInput
}

input PaginationInput {
  page: Int! = 1
  limit: Int! = 10
}

input SortInput {
  field: String!
  direction: String! = "ASC"
}

type Mutation {
  createTask(req: UpsertTaskInput!): ActionTaskResponse!
  updateTask(req: UpsertTaskInput!): ActionTaskResponse!
  deleteTask(id: Int!): ActionTaskResponse!
  createGroup(req: UpsertGroupRequest!): UpsertGroupResponse!
  updateGroup(req: UpsertGroupRequest!): UpsertGroupResponse!
  deleteUserGroup(req: AddAndRemoveUserInput!): AddAndRemoveUserResponse!
  addUserGroup(req: AddAndRemoveUserInput!): AddAndRemoveUserResponse!
  deleteGroup(req: Int!): DeleteGroupResponse!
  changePassword(req: ChangePassInput!, id: Int!): ChangePassResponse!
  updateProfile(req: UpdateProfileInput!, id: Int!): UpdateProfileResponse!
  login(req: LoginDataInput!): LoginResponse!
  register(req: CreateDataInput!): CreateUserResponse!
  refreshToken(token: String!): RefreshTokenResponse!
  logOut(userId: Int!): LogoutResponse!
}

input UpsertTaskInput {
  id: Int
  name: String!
  start_date: String!
  start_time: Timestamp!
  end_time: Timestamp!
  desc: String
  status: Int
  createBy: Int!
  userId: Int!
}

input UpsertGroupRequest {
  id: Int
  group_name: String!
  avatar: String
  members: [Int!]!
  create_by: Int!
}

input AddAndRemoveUserInput {
  groupId: Int!
  userName: String!
}

input ChangePassInput {
  oldPass: String!
  newPass: String!
}

input UpdateProfileInput {
  name: String!
  avatar: String
  dob: String
}

input LoginDataInput {
  emailOrUsername: String!
  password: String!
}

input CreateDataInput {
  email: String!
  name: String!
  password: String!
}